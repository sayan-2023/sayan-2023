/*Given two strings str1 and str2 and below operations that can be performed on str1. Find the minimum number of edits (operations) required to convert ‘str1’ into ‘str2’. 

Insert
Remove
Replace
All of the above operations are of equal cost. 

Examples: 

Input: str1 = “geek”, str2 = “gesek” 
Output: 1 
We can convert str1 into str2 by inserting a ‘s’.

Input: str1 = “cat”, str2 = “cut” 
Output: 1 
We can convert str1 into str2 by replacing ‘a’ with ‘u’.

Input: str1 = “sunday”, str2 = “saturday” 
Output: 3 
Last three and first characters are same. We basically 
need to convert “un” to “atur”. This can be done using 
below three operations. 
Replace ‘n’ with ‘r’, insert t, insert a
*/



//C++ 
#include <bits/stdc++.h>
using namespace std;
int dp[101][1009];
int mymin(int x, int y, int z)
{
    return min(min(x, y), z);
} 

int editDist(string str1, string str2, int m, int n)
{
    
    if (m == 0)
        return m;
 
   
    if (n == 0)
        return m;
    if (dp[m - 1][n - 1] != -1)
        return dp[m - 1][n - 1];
     
 
    
    if (str1[m - 1] == str2[n - 1])
        return dp[m - 1][n - 1]=editDist(str1, str2, m - 1, n - 1);
 
    return dp[m - 1][n - 1]=1 + mymin(editDist(str1, str2, m, n - 1), // Insert
                   editDist(str1, str2, m - 1, n), // Remove
                   editDist(str1, str2, m - 1, n - 1) // Replace
                   );
}
 

int main()
{
   memset(dp, -1, sizeof dp);
    string str1 = "abccdf";
    string str2 = "abcccdf";
    cout << editDist(str1, str2, str1.length(), str2.length());
}
