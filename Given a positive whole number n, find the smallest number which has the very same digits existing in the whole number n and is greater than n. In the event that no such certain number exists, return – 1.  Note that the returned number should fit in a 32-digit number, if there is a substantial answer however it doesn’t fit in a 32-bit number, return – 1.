Given a positive whole number n, find the smallest number which has the very same digits existing in the whole number n and is greater than n. In the event that no such certain number exists, return – 1.

Note that the returned number should fit in a 32-digit number, if there is a substantial answer however it doesn’t fit in a 32-bit number, return – 1.

Example 1:
Input: n = 12
Output: 21

Explanation:  Using the same digit as the number of permutations, the next greatest number for 12 is 21.

Example 2:
Input: n = 21
Output: -1

Explanation:  The returned integer does not fit in a 32-bit integer

#Python
from itertools import permutations
def convertTuple(tup):
                st = ''.join(map(str, tup))
                return st
def Convert(string):
                list1=[]
                list1[:0]=string
                return list1
s=input()
l = tuple((permutations(Convert(s))))
w=[]
for item in l:
                a=convertTuple(item)
                w.append(a)
w=list(map(int, w))
w.sort()
ind=w.index(int(s))
if (ind==len(w)-1):
                print(-1)
else:
       print(w[ind+1])
