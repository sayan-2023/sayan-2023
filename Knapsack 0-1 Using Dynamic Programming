//C++
#include <bits/stdc++.h>
using namespace std;
int dp[105][1000];
int knapSack(int W, int wt[], int val[], int n)
{

	// Base Case
	if (n == 0 || W == 0)
		return 0;
  if(dp[n][W]!=-1)
      	return dp[n][W];
  if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);

	
	else
		return dp[n][W] =max(
			val[n - 1]
				+ knapSack(W - wt[n - 1],
						wt, val, n-1 ),
			knapSack(W, wt, val, n - 1));
}

int main()
{	memset(dp,-1,sizeof(dp));
	int val[] = { 60, 100, 120 };
	int wt[] = { 10, 20, 30 };
	int W = 50;
	int n = sizeof(val) / sizeof(val[0]);
	cout <<  knapSack(W, wt, val, n);

}
