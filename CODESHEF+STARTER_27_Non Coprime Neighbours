An array B of length N (N≥2) is said to be good if the following conditions hold:

For all 1≤i≤N, 2≤Bi≤106
gcd(Bi−1,Bi)≠1 for all i (2≤i≤N).
You have an array A of length N (2≤Ai≤105). You want to make the array A good.

To do so, you can change atmost ⌈2⋅N3⌉ elements of A.

Print the final array after changing A to a good array. If there are multiple possible final arrays, print any of them.

It is guaranteed that A can be made good after changing atmost ⌈2⋅N3⌉ elements of A.

Input Format
The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follow.
The first line of each test case contains an integer N - the length of the array.
The second line of each test case contains N space-separated integers A1,A2,...,AN representing the initial array A.
Output Format
For each test case, output a single line containing N space-separated integers, denoting the elements of the final array after converting A to a good array. The i-th of these N integers is i-th element in the final array.

If multiple arrays exist which satisfy the conditions, print any of them.

Note: Final array should differ from original array at atmost ⌈2⋅N3⌉indices.

Constraints
1≤T≤105
2≤N≤105
2≤Ai≤105
Sum of N does not exceed 2⋅105 over all testcases
Subtasks
30 points : 1≤R≤10000
70 points : 1≤R≤109
Sample Input 1 
2
3
6 12 5
3
5 5 5
Sample Output 1 
6 12 8
5 5 5
Explanation
Test Case 1: We can change A3 to 8. Now, A is good since gcd(A1,A2)=6 and gcd(A2,A3)=4. Hence, we made A good after making only 1 change which is ≤⌈2⋅N3⌉.

Test Case 2: Array A is already good.

//C++

#include<bits/stdc++.h>
#define ll   long long int
using namespace std;

int main()
{
    int t;
    cin >> t;

    while (t--)
    {
        int n;
        cin >> n;

        vector<int> arr(n + 2, 1);

        for (int i = 1; i <= n; i++)
        {
            cin >> arr[i];
        }

        int i = 1, curr = 1;

        while (i <= n)
        {
            if (curr)
            {
                arr[i] = arr[i + 1] * 2;
                i += 2;
            }
            else
            {
                arr[i] = arr[i - 1] * 2;
                i++;
            }

            curr = 1 - curr;
        }

        for (int i = 1; i <= n; i++)
        {
            cout << arr[i] << " ";
        }

        cout<<endl;
    }
}
