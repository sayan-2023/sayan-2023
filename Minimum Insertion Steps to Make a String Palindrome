/*
Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

      Input: s = "zzazz"
      Output: 0
      Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:

      Input: s = "mbadm"
      Output: 2
      Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

      Input: s = "leetcode"
Output: 5
      Explanation: Inserting 5 characters the string becomes "leetcodocteel".
 

Constraints:

        1 <= s.length <= 500
        s consists of lowercase English letters.
*/
//C++ SOLUTION  (DP concept)
int longestpalindromicsequence(string s1){
    int n = s1.length(),i,j,ans = 0;
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        string s2 = s1;
        reverse(begin(s2),end(s2));
        for(i = 1; i<=n; i++){
            for(j = 1; j<=n; j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j] = 1+dp[i-1][j-1];
                }else{
                    dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
                }
                ans = max(ans,dp[i][j]);
            }
        }
        return ans;
    }
    
    
    int minInsertions(string s) {
        return s.length()-longestpalindromicsequence(s);
    }
    int main()
  {
      string st;
      cin>>st;
      cout<<minInsertions(st);
  } 
      

