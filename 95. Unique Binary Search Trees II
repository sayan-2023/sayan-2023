/*
Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.
Example 1:


Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 8
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<TreeNode*> generateBST(int begin, int end)
    {
        vector<TreeNode*> arr;
        
        if(begin>end)
        {
            arr.push_back(NULL);
            return arr;
        }
        
        for(int i=begin; i<=end; i++)
        {
            vector<TreeNode*>left =  generateBST(begin, i-1);
            vector<TreeNode*>right =  generateBST(i+1,end);
            
            for(auto l:left)
            {
                for(auto r:right)
                {
                    TreeNode* root = new TreeNode();
                    root->val = i;
                    root->left = l;
                    root->right = r;
                    arr.push_back(root);
                }
            }
            
        }
        return arr;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        
        vector<TreeNode*>arr;
        if(n==0) return arr;
        
        return generateBST(1,n);
    }
};
